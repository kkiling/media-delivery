syntax = "proto3";

package torrenttomediaserver;

option go_package = "github.com/kkiling/torrent-to-media-server/api";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

service VideoContentService {
  rpc CreateVideoContent(CreateVideoContentRequest)  returns (CreateVideoContentResponse) {
    option (google.api.http) = {
      post: "/v1/content";
      body: "*";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Создание файловой раздачи";
    };
  };
  rpc GetVideoContent(GetVideoContentRequest)  returns (GetVideoContentResponse) {
    option (google.api.http) = {
      get: "/v1/content";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Получение доставок для кино/тв сериала"
    };
  };
  rpc GetTVShowDeliveryData(GetTVShowDeliveryDataRequest)  returns (GetTVShowDeliveryDataResponse) {
    option (google.api.http) = {
      get: "/v1/tvshow/delivery/data";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Получение данных стейта доставки"
    };
  };
  rpc ChoseTorrentOptions(ChoseTorrentOptionsRequest)  returns (ChoseTorrentOptionsResponse) {
    option (google.api.http) = {
      patch: "/v1/tvshow/delivery/chose-torrent";
      body: "*";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Выбор раздачи с торрента"
    };
  };
  rpc ChoseFileMatchesOptions(ChoseFileMatchesOptionsRequest)  returns (ChoseFileMatchesOptionsResponse) {
    option (google.api.http) = {
      patch: "/v1/tvshow/delivery/chose-file-matches";
      body: "*";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Подтверждение метча файлов"
    };
  };
}

message TVShowID  {
  uint64 id = 1;
  uint32 season_number = 2;
}

message ContentID {
  optional uint64 movie_id = 1;
  optional TVShowID tv_show = 2;
}

enum DeliveryStatus {
  DeliveryStatusUnknown = 0;
  DeliveryStatusFailed = 1;
  DeliveryStatusInProgress = 2;
  DeliveryStatusDelivered = 3;
}

message VideoContent {
  string id = 1;
  google.protobuf.Timestamp created_at = 2;
  ContentID content_id = 3;
  DeliveryStatus delivery_status = 4;
}

enum TVShowDeliveryStatus {
  // Неизвестный статус доставки
  TVShowDeliveryStatusUnknown = 0;
  // Генерация запроса к трекеру
  GenerateSearchQuery = 1;
  // Поиск раздач сезона сериала/фильма
  SearchTorrents = 2;
  // Ожидание выбора раздачи пользователем
  WaitingUserChoseTorrent = 3;
  // Получение магнет ссылки
  GetMagnetLink = 4;
  // Добавление раздачи для скачивания торрент клиентом
  AddTorrentToTorrentClient = 5;
  // Получение информации о файлах раздачи
  PrepareFileMatches = 6;
  // Ожидание подтверждения пользователем соответствий выбора файлов
  WaitingChoseFileMatches = 7;
  // Ожидание завершения окончания скачивания раздачи
  WaitingTorrentDownloadComplete = 8;
  // Формирование каталогов и иерархии файлов
  CreateVideoContentCatalogs = 9;
  // Определение необходимости конвертации файлов
  DeterminingNeedConvertFiles = 10;
  // Запуск конвертирования файлов
  StartMergeVideoFiles = 11;
  // Ожидание завершения конвертации файлов
  WaitingMergeVideoFiles = 12;
  // Копирование файлов из раздачи в каталог медиасервера
  CopyVideoFiles = 13;
  // Установка группы файлам
  SetVideoFileGroup = 14;
  // GetCatalogsSize получение размеров каталогов сериала
  GetCatalogsSize = 15;
  // Установка методаных серий сезона сериала/фильма в медиасервере
  SetMediaMetaData = 16;
  // Отправка уведомления в telegramm о успешной доставки
  SendDeliveryNotification = 17;
}

message TorrentSearch {
  string title = 1;
  string href = 2;
  string size = 3;
  string seeds = 4;
  string leeches   = 5;
  string downloads = 6;
  string added_date = 7;
}

message FileInfo {
  string relative_path = 1;
  string full_path = 2;
  int64  size = 3;
  string extension = 4;
}

message EpisodeInfo {
  uint32 season_number = 1;
  string episode_name = 2;
  uint32 episode_number = 3;
}

message VideoFile {
  FileInfo file = 1;
}

message Track {
  FileInfo file = 1;
  string name = 2;
  string language = 3;
}

message ContentMatches {
  EpisodeInfo episode = 1;
  VideoFile video = 2;
  repeated Track audio_files = 3;
  repeated Track subtitles = 4;
}

message TorrentDownloadStatus {
  enum TorrentState {
    TORRENT_STATE_UNKNOWN = 0;
    TORRENT_STATE_ERROR = 1;
    TORRENT_STATE_UPLOADING = 2;
    TORRENT_STATE_DOWNLOADING = 3;
    TORRENT_STATE_STOPPED = 4;
    TORRENT_STATE_QUEUED = 5;
  }
  TorrentState state = 1;
  float progress = 2;
  bool is_complete = 3;
}

message MergeVideoStatus {
  float progress = 1;
  bool is_complete = 2;
}

message TVShowDeliveryData {
  optional string search_query = 1;
  repeated TorrentSearch torrent_search = 2;
  repeated ContentMatches content_matches = 3;
  // статус скачивания раздачи
  optional TorrentDownloadStatus torrent_download_status = 4;
  // статус сшивания файлов
  optional MergeVideoStatus merge_video_status = 5;
}

message TVShowDeliveryState {
  TVShowDeliveryData data = 1;
  TVShowDeliveryStatus step = 2;
}

message CreateVideoContentRequest {
  ContentID content_id = 1;
}

message CreateVideoContentResponse {
  VideoContent result = 1;
}

message GetVideoContentRequest {
  ContentID content_id = 1;
}

message GetVideoContentResponse {
  repeated VideoContent items = 1;
}

message GetTVShowDeliveryDataRequest {
  ContentID content_id = 1;
}

message GetTVShowDeliveryDataResponse {
  TVShowDeliveryState result = 1;
}

message ChoseTorrentOptionsRequest {
  ContentID content_id = 1;
  // Пользователь выбрал конкретный торрента файл
  optional string href = 2;
  // Пользователь поменял поисковый запрос
  optional string new_search_query = 3;
}

message ChoseTorrentOptionsResponse {
  TVShowDeliveryState result = 1;
}

message ChoseFileMatchesOptionsRequest {
  ContentID content_id = 1;
  // Пользователь подтверждает сметченные файлы
  bool approve = 2;
}

message ChoseFileMatchesOptionsResponse {
  TVShowDeliveryState result = 1;
}