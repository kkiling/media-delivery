// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: media-delivery/tvshow.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TVShowLibraryService_SearchTVShow_FullMethodName          = "/mediadelivery.TVShowLibraryService/SearchTVShow"
	TVShowLibraryService_GetTVShowsFromLibrary_FullMethodName = "/mediadelivery.TVShowLibraryService/GetTVShowsFromLibrary"
	TVShowLibraryService_GetTVShowInfo_FullMethodName         = "/mediadelivery.TVShowLibraryService/GetTVShowInfo"
	TVShowLibraryService_GetSeasonInfo_FullMethodName         = "/mediadelivery.TVShowLibraryService/GetSeasonInfo"
)

// TVShowLibraryServiceClient is the client API for TVShowLibraryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TVShowLibraryServiceClient interface {
	SearchTVShow(ctx context.Context, in *SearchTVShowRequest, opts ...grpc.CallOption) (*SearchTVShowResponse, error)
	GetTVShowsFromLibrary(ctx context.Context, in *GetTVShowsFromLibraryRequest, opts ...grpc.CallOption) (*GetTVShowsFromLibraryResponse, error)
	GetTVShowInfo(ctx context.Context, in *GetTVShowInfoRequest, opts ...grpc.CallOption) (*GetTVShowInfoResponse, error)
	GetSeasonInfo(ctx context.Context, in *GetSeasonInfoRequest, opts ...grpc.CallOption) (*GetSeasonInfoResponse, error)
}

type tVShowLibraryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTVShowLibraryServiceClient(cc grpc.ClientConnInterface) TVShowLibraryServiceClient {
	return &tVShowLibraryServiceClient{cc}
}

func (c *tVShowLibraryServiceClient) SearchTVShow(ctx context.Context, in *SearchTVShowRequest, opts ...grpc.CallOption) (*SearchTVShowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchTVShowResponse)
	err := c.cc.Invoke(ctx, TVShowLibraryService_SearchTVShow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tVShowLibraryServiceClient) GetTVShowsFromLibrary(ctx context.Context, in *GetTVShowsFromLibraryRequest, opts ...grpc.CallOption) (*GetTVShowsFromLibraryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTVShowsFromLibraryResponse)
	err := c.cc.Invoke(ctx, TVShowLibraryService_GetTVShowsFromLibrary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tVShowLibraryServiceClient) GetTVShowInfo(ctx context.Context, in *GetTVShowInfoRequest, opts ...grpc.CallOption) (*GetTVShowInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTVShowInfoResponse)
	err := c.cc.Invoke(ctx, TVShowLibraryService_GetTVShowInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tVShowLibraryServiceClient) GetSeasonInfo(ctx context.Context, in *GetSeasonInfoRequest, opts ...grpc.CallOption) (*GetSeasonInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSeasonInfoResponse)
	err := c.cc.Invoke(ctx, TVShowLibraryService_GetSeasonInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TVShowLibraryServiceServer is the server API for TVShowLibraryService service.
// All implementations must embed UnimplementedTVShowLibraryServiceServer
// for forward compatibility.
type TVShowLibraryServiceServer interface {
	SearchTVShow(context.Context, *SearchTVShowRequest) (*SearchTVShowResponse, error)
	GetTVShowsFromLibrary(context.Context, *GetTVShowsFromLibraryRequest) (*GetTVShowsFromLibraryResponse, error)
	GetTVShowInfo(context.Context, *GetTVShowInfoRequest) (*GetTVShowInfoResponse, error)
	GetSeasonInfo(context.Context, *GetSeasonInfoRequest) (*GetSeasonInfoResponse, error)
	mustEmbedUnimplementedTVShowLibraryServiceServer()
}

// UnimplementedTVShowLibraryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTVShowLibraryServiceServer struct{}

func (UnimplementedTVShowLibraryServiceServer) SearchTVShow(context.Context, *SearchTVShowRequest) (*SearchTVShowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTVShow not implemented")
}
func (UnimplementedTVShowLibraryServiceServer) GetTVShowsFromLibrary(context.Context, *GetTVShowsFromLibraryRequest) (*GetTVShowsFromLibraryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTVShowsFromLibrary not implemented")
}
func (UnimplementedTVShowLibraryServiceServer) GetTVShowInfo(context.Context, *GetTVShowInfoRequest) (*GetTVShowInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTVShowInfo not implemented")
}
func (UnimplementedTVShowLibraryServiceServer) GetSeasonInfo(context.Context, *GetSeasonInfoRequest) (*GetSeasonInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeasonInfo not implemented")
}
func (UnimplementedTVShowLibraryServiceServer) mustEmbedUnimplementedTVShowLibraryServiceServer() {}
func (UnimplementedTVShowLibraryServiceServer) testEmbeddedByValue()                              {}

// UnsafeTVShowLibraryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TVShowLibraryServiceServer will
// result in compilation errors.
type UnsafeTVShowLibraryServiceServer interface {
	mustEmbedUnimplementedTVShowLibraryServiceServer()
}

func RegisterTVShowLibraryServiceServer(s grpc.ServiceRegistrar, srv TVShowLibraryServiceServer) {
	// If the following call pancis, it indicates UnimplementedTVShowLibraryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TVShowLibraryService_ServiceDesc, srv)
}

func _TVShowLibraryService_SearchTVShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTVShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TVShowLibraryServiceServer).SearchTVShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TVShowLibraryService_SearchTVShow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TVShowLibraryServiceServer).SearchTVShow(ctx, req.(*SearchTVShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TVShowLibraryService_GetTVShowsFromLibrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTVShowsFromLibraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TVShowLibraryServiceServer).GetTVShowsFromLibrary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TVShowLibraryService_GetTVShowsFromLibrary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TVShowLibraryServiceServer).GetTVShowsFromLibrary(ctx, req.(*GetTVShowsFromLibraryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TVShowLibraryService_GetTVShowInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTVShowInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TVShowLibraryServiceServer).GetTVShowInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TVShowLibraryService_GetTVShowInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TVShowLibraryServiceServer).GetTVShowInfo(ctx, req.(*GetTVShowInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TVShowLibraryService_GetSeasonInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeasonInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TVShowLibraryServiceServer).GetSeasonInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TVShowLibraryService_GetSeasonInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TVShowLibraryServiceServer).GetSeasonInfo(ctx, req.(*GetSeasonInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TVShowLibraryService_ServiceDesc is the grpc.ServiceDesc for TVShowLibraryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TVShowLibraryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediadelivery.TVShowLibraryService",
	HandlerType: (*TVShowLibraryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchTVShow",
			Handler:    _TVShowLibraryService_SearchTVShow_Handler,
		},
		{
			MethodName: "GetTVShowsFromLibrary",
			Handler:    _TVShowLibraryService_GetTVShowsFromLibrary_Handler,
		},
		{
			MethodName: "GetTVShowInfo",
			Handler:    _TVShowLibraryService_GetTVShowInfo_Handler,
		},
		{
			MethodName: "GetSeasonInfo",
			Handler:    _TVShowLibraryService_GetSeasonInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "media-delivery/tvshow.proto",
}
