// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: torrent-to-media-server/videocontent.proto

package api

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeliveryStatus int32

const (
	DeliveryStatus_DeliveryStatusUnknown    DeliveryStatus = 0
	DeliveryStatus_DeliveryStatusFailed     DeliveryStatus = 1
	DeliveryStatus_DeliveryStatusInProgress DeliveryStatus = 2
	DeliveryStatus_DeliveryStatusDelivered  DeliveryStatus = 3
)

// Enum value maps for DeliveryStatus.
var (
	DeliveryStatus_name = map[int32]string{
		0: "DeliveryStatusUnknown",
		1: "DeliveryStatusFailed",
		2: "DeliveryStatusInProgress",
		3: "DeliveryStatusDelivered",
	}
	DeliveryStatus_value = map[string]int32{
		"DeliveryStatusUnknown":    0,
		"DeliveryStatusFailed":     1,
		"DeliveryStatusInProgress": 2,
		"DeliveryStatusDelivered":  3,
	}
)

func (x DeliveryStatus) Enum() *DeliveryStatus {
	p := new(DeliveryStatus)
	*p = x
	return p
}

func (x DeliveryStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeliveryStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_torrent_to_media_server_videocontent_proto_enumTypes[0].Descriptor()
}

func (DeliveryStatus) Type() protoreflect.EnumType {
	return &file_torrent_to_media_server_videocontent_proto_enumTypes[0]
}

func (x DeliveryStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeliveryStatus.Descriptor instead.
func (DeliveryStatus) EnumDescriptor() ([]byte, []int) {
	return file_torrent_to_media_server_videocontent_proto_rawDescGZIP(), []int{0}
}

type TVShowDeliveryStatus int32

const (
	// Неизвестный статус доставки
	TVShowDeliveryStatus_TVShowDeliveryStatusUnknown TVShowDeliveryStatus = 0
	// Генерация запроса к трекеру
	TVShowDeliveryStatus_GenerateSearchQuery TVShowDeliveryStatus = 1
	// Поиск раздач сезона сериала/фильма
	TVShowDeliveryStatus_SearchTorrents TVShowDeliveryStatus = 2
	// Ожидание выбора раздачи пользователем
	TVShowDeliveryStatus_WaitingUserChoseTorrent TVShowDeliveryStatus = 3
	// Получение магнет ссылки
	TVShowDeliveryStatus_GetMagnetLink TVShowDeliveryStatus = 4
	// Добавление раздачи для скачивания торрент клиентом
	TVShowDeliveryStatus_AddTorrentToTorrentClient TVShowDeliveryStatus = 5
	// Получение информации о файлах раздачи
	TVShowDeliveryStatus_PrepareFileMatches TVShowDeliveryStatus = 6
	// Ожидание подтверждения пользователем соответствий выбора файлов
	TVShowDeliveryStatus_WaitingChoseFileMatches TVShowDeliveryStatus = 7
	// Ожидание завершения окончания скачивания раздачи
	TVShowDeliveryStatus_WaitingTorrentDownloadComplete TVShowDeliveryStatus = 8
	// Формирование каталогов и иерархии файлов
	TVShowDeliveryStatus_CreateVideoContentCatalogs TVShowDeliveryStatus = 9
	// Определение необходимости конвертации файлов
	TVShowDeliveryStatus_DeterminingNeedConvertFiles TVShowDeliveryStatus = 10
	// Запуск конвертирования файлов
	TVShowDeliveryStatus_StartMergeVideoFiles TVShowDeliveryStatus = 11
	// Ожидание завершения конвертации файлов
	TVShowDeliveryStatus_WaitingMergeVideoFiles TVShowDeliveryStatus = 12
	// Копирование файлов из раздачи в каталог медиасервера
	TVShowDeliveryStatus_CopyVideoFiles TVShowDeliveryStatus = 13
	// Установка группы файлам
	TVShowDeliveryStatus_SetVideoFileGroup TVShowDeliveryStatus = 14
	// GetCatalogsSize получение размеров каталогов сериала
	TVShowDeliveryStatus_GetCatalogsSize TVShowDeliveryStatus = 15
	// Установка методаных серий сезона сериала/фильма в медиасервере
	TVShowDeliveryStatus_SetMediaMetaData TVShowDeliveryStatus = 16
	// Отправка уведомления в telegramm о успешной доставки
	TVShowDeliveryStatus_SendDeliveryNotification TVShowDeliveryStatus = 17
)

// Enum value maps for TVShowDeliveryStatus.
var (
	TVShowDeliveryStatus_name = map[int32]string{
		0:  "TVShowDeliveryStatusUnknown",
		1:  "GenerateSearchQuery",
		2:  "SearchTorrents",
		3:  "WaitingUserChoseTorrent",
		4:  "GetMagnetLink",
		5:  "AddTorrentToTorrentClient",
		6:  "PrepareFileMatches",
		7:  "WaitingChoseFileMatches",
		8:  "WaitingTorrentDownloadComplete",
		9:  "CreateVideoContentCatalogs",
		10: "DeterminingNeedConvertFiles",
		11: "StartMergeVideoFiles",
		12: "WaitingMergeVideoFiles",
		13: "CopyVideoFiles",
		14: "SetVideoFileGroup",
		15: "GetCatalogsSize",
		16: "SetMediaMetaData",
		17: "SendDeliveryNotification",
	}
	TVShowDeliveryStatus_value = map[string]int32{
		"TVShowDeliveryStatusUnknown":    0,
		"GenerateSearchQuery":            1,
		"SearchTorrents":                 2,
		"WaitingUserChoseTorrent":        3,
		"GetMagnetLink":                  4,
		"AddTorrentToTorrentClient":      5,
		"PrepareFileMatches":             6,
		"WaitingChoseFileMatches":        7,
		"WaitingTorrentDownloadComplete": 8,
		"CreateVideoContentCatalogs":     9,
		"DeterminingNeedConvertFiles":    10,
		"StartMergeVideoFiles":           11,
		"WaitingMergeVideoFiles":         12,
		"CopyVideoFiles":                 13,
		"SetVideoFileGroup":              14,
		"GetCatalogsSize":                15,
		"SetMediaMetaData":               16,
		"SendDeliveryNotification":       17,
	}
)

func (x TVShowDeliveryStatus) Enum() *TVShowDeliveryStatus {
	p := new(TVShowDeliveryStatus)
	*p = x
	return p
}

func (x TVShowDeliveryStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TVShowDeliveryStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_torrent_to_media_server_videocontent_proto_enumTypes[1].Descriptor()
}

func (TVShowDeliveryStatus) Type() protoreflect.EnumType {
	return &file_torrent_to_media_server_videocontent_proto_enumTypes[1]
}

func (x TVShowDeliveryStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TVShowDeliveryStatus.Descriptor instead.
func (TVShowDeliveryStatus) EnumDescriptor() ([]byte, []int) {
	return file_torrent_to_media_server_videocontent_proto_rawDescGZIP(), []int{1}
}

type TorrentDownloadStatus_TorrentState int32

const (
	TorrentDownloadStatus_TORRENT_STATE_UNKNOWN     TorrentDownloadStatus_TorrentState = 0
	TorrentDownloadStatus_TORRENT_STATE_ERROR       TorrentDownloadStatus_TorrentState = 1
	TorrentDownloadStatus_TORRENT_STATE_UPLOADING   TorrentDownloadStatus_TorrentState = 2
	TorrentDownloadStatus_TORRENT_STATE_DOWNLOADING TorrentDownloadStatus_TorrentState = 3
	TorrentDownloadStatus_TORRENT_STATE_STOPPED     TorrentDownloadStatus_TorrentState = 4
	TorrentDownloadStatus_TORRENT_STATE_QUEUED      TorrentDownloadStatus_TorrentState = 5
)

// Enum value maps for TorrentDownloadStatus_TorrentState.
var (
	TorrentDownloadStatus_TorrentState_name = map[int32]string{
		0: "TORRENT_STATE_UNKNOWN",
		1: "TORRENT_STATE_ERROR",
		2: "TORRENT_STATE_UPLOADING",
		3: "TORRENT_STATE_DOWNLOADING",
		4: "TORRENT_STATE_STOPPED",
		5: "TORRENT_STATE_QUEUED",
	}
	TorrentDownloadStatus_TorrentState_value = map[string]int32{
		"TORRENT_STATE_UNKNOWN":     0,
		"TORRENT_STATE_ERROR":       1,
		"TORRENT_STATE_UPLOADING":   2,
		"TORRENT_STATE_DOWNLOADING": 3,
		"TORRENT_STATE_STOPPED":     4,
		"TORRENT_STATE_QUEUED":      5,
	}
)

func (x TorrentDownloadStatus_TorrentState) Enum() *TorrentDownloadStatus_TorrentState {
	p := new(TorrentDownloadStatus_TorrentState)
	*p = x
	return p
}

func (x TorrentDownloadStatus_TorrentState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TorrentDownloadStatus_TorrentState) Descriptor() protoreflect.EnumDescriptor {
	return file_torrent_to_media_server_videocontent_proto_enumTypes[2].Descriptor()
}

func (TorrentDownloadStatus_TorrentState) Type() protoreflect.EnumType {
	return &file_torrent_to_media_server_videocontent_proto_enumTypes[2]
}

func (x TorrentDownloadStatus_TorrentState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TorrentDownloadStatus_TorrentState.Descriptor instead.
func (TorrentDownloadStatus_TorrentState) EnumDescriptor() ([]byte, []int) {
	return file_torrent_to_media_server_videocontent_proto_rawDescGZIP(), []int{9, 0}
}

type TVShowID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SeasonNumber  uint32                 `protobuf:"varint,2,opt,name=season_number,json=seasonNumber,proto3" json:"season_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TVShowID) Reset() {
	*x = TVShowID{}
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TVShowID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TVShowID) ProtoMessage() {}

func (x *TVShowID) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TVShowID.ProtoReflect.Descriptor instead.
func (*TVShowID) Descriptor() ([]byte, []int) {
	return file_torrent_to_media_server_videocontent_proto_rawDescGZIP(), []int{0}
}

func (x *TVShowID) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TVShowID) GetSeasonNumber() uint32 {
	if x != nil {
		return x.SeasonNumber
	}
	return 0
}

type ContentID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MovieId       *uint64                `protobuf:"varint,1,opt,name=movie_id,json=movieId,proto3,oneof" json:"movie_id,omitempty"`
	TvShow        *TVShowID              `protobuf:"bytes,2,opt,name=tv_show,json=tvShow,proto3,oneof" json:"tv_show,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContentID) Reset() {
	*x = ContentID{}
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContentID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentID) ProtoMessage() {}

func (x *ContentID) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentID.ProtoReflect.Descriptor instead.
func (*ContentID) Descriptor() ([]byte, []int) {
	return file_torrent_to_media_server_videocontent_proto_rawDescGZIP(), []int{1}
}

func (x *ContentID) GetMovieId() uint64 {
	if x != nil && x.MovieId != nil {
		return *x.MovieId
	}
	return 0
}

func (x *ContentID) GetTvShow() *TVShowID {
	if x != nil {
		return x.TvShow
	}
	return nil
}

type VideoContent struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ContentId      *ContentID             `protobuf:"bytes,3,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	DeliveryStatus DeliveryStatus         `protobuf:"varint,4,opt,name=delivery_status,json=deliveryStatus,proto3,enum=torrenttomediaserver.DeliveryStatus" json:"delivery_status,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *VideoContent) Reset() {
	*x = VideoContent{}
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoContent) ProtoMessage() {}

func (x *VideoContent) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoContent.ProtoReflect.Descriptor instead.
func (*VideoContent) Descriptor() ([]byte, []int) {
	return file_torrent_to_media_server_videocontent_proto_rawDescGZIP(), []int{2}
}

func (x *VideoContent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VideoContent) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *VideoContent) GetContentId() *ContentID {
	if x != nil {
		return x.ContentId
	}
	return nil
}

func (x *VideoContent) GetDeliveryStatus() DeliveryStatus {
	if x != nil {
		return x.DeliveryStatus
	}
	return DeliveryStatus_DeliveryStatusUnknown
}

type TorrentSearch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Href          string                 `protobuf:"bytes,2,opt,name=href,proto3" json:"href,omitempty"`
	Size          string                 `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Seeds         string                 `protobuf:"bytes,4,opt,name=seeds,proto3" json:"seeds,omitempty"`
	Leeches       string                 `protobuf:"bytes,5,opt,name=leeches,proto3" json:"leeches,omitempty"`
	Downloads     string                 `protobuf:"bytes,6,opt,name=downloads,proto3" json:"downloads,omitempty"`
	AddedDate     string                 `protobuf:"bytes,7,opt,name=added_date,json=addedDate,proto3" json:"added_date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TorrentSearch) Reset() {
	*x = TorrentSearch{}
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TorrentSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TorrentSearch) ProtoMessage() {}

func (x *TorrentSearch) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TorrentSearch.ProtoReflect.Descriptor instead.
func (*TorrentSearch) Descriptor() ([]byte, []int) {
	return file_torrent_to_media_server_videocontent_proto_rawDescGZIP(), []int{3}
}

func (x *TorrentSearch) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TorrentSearch) GetHref() string {
	if x != nil {
		return x.Href
	}
	return ""
}

func (x *TorrentSearch) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *TorrentSearch) GetSeeds() string {
	if x != nil {
		return x.Seeds
	}
	return ""
}

func (x *TorrentSearch) GetLeeches() string {
	if x != nil {
		return x.Leeches
	}
	return ""
}

func (x *TorrentSearch) GetDownloads() string {
	if x != nil {
		return x.Downloads
	}
	return ""
}

func (x *TorrentSearch) GetAddedDate() string {
	if x != nil {
		return x.AddedDate
	}
	return ""
}

type FileInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RelativePath  string                 `protobuf:"bytes,1,opt,name=relative_path,json=relativePath,proto3" json:"relative_path,omitempty"`
	FullPath      string                 `protobuf:"bytes,2,opt,name=full_path,json=fullPath,proto3" json:"full_path,omitempty"`
	Size          int64                  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Extension     string                 `protobuf:"bytes,4,opt,name=extension,proto3" json:"extension,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_torrent_to_media_server_videocontent_proto_rawDescGZIP(), []int{4}
}

func (x *FileInfo) GetRelativePath() string {
	if x != nil {
		return x.RelativePath
	}
	return ""
}

func (x *FileInfo) GetFullPath() string {
	if x != nil {
		return x.FullPath
	}
	return ""
}

func (x *FileInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileInfo) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

type EpisodeInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SeasonNumber  uint32                 `protobuf:"varint,1,opt,name=season_number,json=seasonNumber,proto3" json:"season_number,omitempty"`
	EpisodeName   string                 `protobuf:"bytes,2,opt,name=episode_name,json=episodeName,proto3" json:"episode_name,omitempty"`
	EpisodeNumber uint32                 `protobuf:"varint,3,opt,name=episode_number,json=episodeNumber,proto3" json:"episode_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EpisodeInfo) Reset() {
	*x = EpisodeInfo{}
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EpisodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeInfo) ProtoMessage() {}

func (x *EpisodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeInfo.ProtoReflect.Descriptor instead.
func (*EpisodeInfo) Descriptor() ([]byte, []int) {
	return file_torrent_to_media_server_videocontent_proto_rawDescGZIP(), []int{5}
}

func (x *EpisodeInfo) GetSeasonNumber() uint32 {
	if x != nil {
		return x.SeasonNumber
	}
	return 0
}

func (x *EpisodeInfo) GetEpisodeName() string {
	if x != nil {
		return x.EpisodeName
	}
	return ""
}

func (x *EpisodeInfo) GetEpisodeNumber() uint32 {
	if x != nil {
		return x.EpisodeNumber
	}
	return 0
}

type VideoFile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	File          *FileInfo              `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoFile) Reset() {
	*x = VideoFile{}
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoFile) ProtoMessage() {}

func (x *VideoFile) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoFile.ProtoReflect.Descriptor instead.
func (*VideoFile) Descriptor() ([]byte, []int) {
	return file_torrent_to_media_server_videocontent_proto_rawDescGZIP(), []int{6}
}

func (x *VideoFile) GetFile() *FileInfo {
	if x != nil {
		return x.File
	}
	return nil
}

type Track struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	File          *FileInfo              `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Language      string                 `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Track) Reset() {
	*x = Track{}
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Track) ProtoMessage() {}

func (x *Track) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Track.ProtoReflect.Descriptor instead.
func (*Track) Descriptor() ([]byte, []int) {
	return file_torrent_to_media_server_videocontent_proto_rawDescGZIP(), []int{7}
}

func (x *Track) GetFile() *FileInfo {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *Track) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Track) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type ContentMatches struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Episode       *EpisodeInfo           `protobuf:"bytes,1,opt,name=episode,proto3" json:"episode,omitempty"`
	Video         *VideoFile             `protobuf:"bytes,2,opt,name=video,proto3" json:"video,omitempty"`
	AudioFiles    []*Track               `protobuf:"bytes,3,rep,name=audio_files,json=audioFiles,proto3" json:"audio_files,omitempty"`
	Subtitles     []*Track               `protobuf:"bytes,4,rep,name=subtitles,proto3" json:"subtitles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContentMatches) Reset() {
	*x = ContentMatches{}
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContentMatches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentMatches) ProtoMessage() {}

func (x *ContentMatches) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentMatches.ProtoReflect.Descriptor instead.
func (*ContentMatches) Descriptor() ([]byte, []int) {
	return file_torrent_to_media_server_videocontent_proto_rawDescGZIP(), []int{8}
}

func (x *ContentMatches) GetEpisode() *EpisodeInfo {
	if x != nil {
		return x.Episode
	}
	return nil
}

func (x *ContentMatches) GetVideo() *VideoFile {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *ContentMatches) GetAudioFiles() []*Track {
	if x != nil {
		return x.AudioFiles
	}
	return nil
}

func (x *ContentMatches) GetSubtitles() []*Track {
	if x != nil {
		return x.Subtitles
	}
	return nil
}

type TorrentDownloadStatus struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	State         TorrentDownloadStatus_TorrentState `protobuf:"varint,1,opt,name=state,proto3,enum=torrenttomediaserver.TorrentDownloadStatus_TorrentState" json:"state,omitempty"`
	Progress      float32                            `protobuf:"fixed32,2,opt,name=progress,proto3" json:"progress,omitempty"`
	IsComplete    bool                               `protobuf:"varint,3,opt,name=is_complete,json=isComplete,proto3" json:"is_complete,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TorrentDownloadStatus) Reset() {
	*x = TorrentDownloadStatus{}
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TorrentDownloadStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TorrentDownloadStatus) ProtoMessage() {}

func (x *TorrentDownloadStatus) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TorrentDownloadStatus.ProtoReflect.Descriptor instead.
func (*TorrentDownloadStatus) Descriptor() ([]byte, []int) {
	return file_torrent_to_media_server_videocontent_proto_rawDescGZIP(), []int{9}
}

func (x *TorrentDownloadStatus) GetState() TorrentDownloadStatus_TorrentState {
	if x != nil {
		return x.State
	}
	return TorrentDownloadStatus_TORRENT_STATE_UNKNOWN
}

func (x *TorrentDownloadStatus) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *TorrentDownloadStatus) GetIsComplete() bool {
	if x != nil {
		return x.IsComplete
	}
	return false
}

type MergeVideoStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Progress      float32                `protobuf:"fixed32,1,opt,name=progress,proto3" json:"progress,omitempty"`
	IsComplete    bool                   `protobuf:"varint,2,opt,name=is_complete,json=isComplete,proto3" json:"is_complete,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MergeVideoStatus) Reset() {
	*x = MergeVideoStatus{}
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeVideoStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeVideoStatus) ProtoMessage() {}

func (x *MergeVideoStatus) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeVideoStatus.ProtoReflect.Descriptor instead.
func (*MergeVideoStatus) Descriptor() ([]byte, []int) {
	return file_torrent_to_media_server_videocontent_proto_rawDescGZIP(), []int{10}
}

func (x *MergeVideoStatus) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *MergeVideoStatus) GetIsComplete() bool {
	if x != nil {
		return x.IsComplete
	}
	return false
}

type TVShowDeliveryData struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SearchQuery    *string                `protobuf:"bytes,1,opt,name=search_query,json=searchQuery,proto3,oneof" json:"search_query,omitempty"`
	TorrentSearch  []*TorrentSearch       `protobuf:"bytes,2,rep,name=torrent_search,json=torrentSearch,proto3" json:"torrent_search,omitempty"`
	ContentMatches []*ContentMatches      `protobuf:"bytes,3,rep,name=content_matches,json=contentMatches,proto3" json:"content_matches,omitempty"`
	// статус скачивания раздачи
	TorrentDownloadStatus *TorrentDownloadStatus `protobuf:"bytes,4,opt,name=torrent_download_status,json=torrentDownloadStatus,proto3,oneof" json:"torrent_download_status,omitempty"`
	// статус сшивания файлов
	MergeVideoStatus *MergeVideoStatus `protobuf:"bytes,5,opt,name=merge_video_status,json=mergeVideoStatus,proto3,oneof" json:"merge_video_status,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TVShowDeliveryData) Reset() {
	*x = TVShowDeliveryData{}
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TVShowDeliveryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TVShowDeliveryData) ProtoMessage() {}

func (x *TVShowDeliveryData) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TVShowDeliveryData.ProtoReflect.Descriptor instead.
func (*TVShowDeliveryData) Descriptor() ([]byte, []int) {
	return file_torrent_to_media_server_videocontent_proto_rawDescGZIP(), []int{11}
}

func (x *TVShowDeliveryData) GetSearchQuery() string {
	if x != nil && x.SearchQuery != nil {
		return *x.SearchQuery
	}
	return ""
}

func (x *TVShowDeliveryData) GetTorrentSearch() []*TorrentSearch {
	if x != nil {
		return x.TorrentSearch
	}
	return nil
}

func (x *TVShowDeliveryData) GetContentMatches() []*ContentMatches {
	if x != nil {
		return x.ContentMatches
	}
	return nil
}

func (x *TVShowDeliveryData) GetTorrentDownloadStatus() *TorrentDownloadStatus {
	if x != nil {
		return x.TorrentDownloadStatus
	}
	return nil
}

func (x *TVShowDeliveryData) GetMergeVideoStatus() *MergeVideoStatus {
	if x != nil {
		return x.MergeVideoStatus
	}
	return nil
}

type TVShowDeliveryState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *TVShowDeliveryData    `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Step          TVShowDeliveryStatus   `protobuf:"varint,2,opt,name=step,proto3,enum=torrenttomediaserver.TVShowDeliveryStatus" json:"step,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TVShowDeliveryState) Reset() {
	*x = TVShowDeliveryState{}
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TVShowDeliveryState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TVShowDeliveryState) ProtoMessage() {}

func (x *TVShowDeliveryState) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TVShowDeliveryState.ProtoReflect.Descriptor instead.
func (*TVShowDeliveryState) Descriptor() ([]byte, []int) {
	return file_torrent_to_media_server_videocontent_proto_rawDescGZIP(), []int{12}
}

func (x *TVShowDeliveryState) GetData() *TVShowDeliveryData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TVShowDeliveryState) GetStep() TVShowDeliveryStatus {
	if x != nil {
		return x.Step
	}
	return TVShowDeliveryStatus_TVShowDeliveryStatusUnknown
}

type CreateVideoContentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContentId     *ContentID             `protobuf:"bytes,1,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVideoContentRequest) Reset() {
	*x = CreateVideoContentRequest{}
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVideoContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVideoContentRequest) ProtoMessage() {}

func (x *CreateVideoContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVideoContentRequest.ProtoReflect.Descriptor instead.
func (*CreateVideoContentRequest) Descriptor() ([]byte, []int) {
	return file_torrent_to_media_server_videocontent_proto_rawDescGZIP(), []int{13}
}

func (x *CreateVideoContentRequest) GetContentId() *ContentID {
	if x != nil {
		return x.ContentId
	}
	return nil
}

type CreateVideoContentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *VideoContent          `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVideoContentResponse) Reset() {
	*x = CreateVideoContentResponse{}
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVideoContentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVideoContentResponse) ProtoMessage() {}

func (x *CreateVideoContentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVideoContentResponse.ProtoReflect.Descriptor instead.
func (*CreateVideoContentResponse) Descriptor() ([]byte, []int) {
	return file_torrent_to_media_server_videocontent_proto_rawDescGZIP(), []int{14}
}

func (x *CreateVideoContentResponse) GetResult() *VideoContent {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetVideoContentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContentId     *ContentID             `protobuf:"bytes,1,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVideoContentRequest) Reset() {
	*x = GetVideoContentRequest{}
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVideoContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoContentRequest) ProtoMessage() {}

func (x *GetVideoContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoContentRequest.ProtoReflect.Descriptor instead.
func (*GetVideoContentRequest) Descriptor() ([]byte, []int) {
	return file_torrent_to_media_server_videocontent_proto_rawDescGZIP(), []int{15}
}

func (x *GetVideoContentRequest) GetContentId() *ContentID {
	if x != nil {
		return x.ContentId
	}
	return nil
}

type GetVideoContentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*VideoContent        `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVideoContentResponse) Reset() {
	*x = GetVideoContentResponse{}
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVideoContentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoContentResponse) ProtoMessage() {}

func (x *GetVideoContentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoContentResponse.ProtoReflect.Descriptor instead.
func (*GetVideoContentResponse) Descriptor() ([]byte, []int) {
	return file_torrent_to_media_server_videocontent_proto_rawDescGZIP(), []int{16}
}

func (x *GetVideoContentResponse) GetItems() []*VideoContent {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetTVShowDeliveryDataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContentId     *ContentID             `protobuf:"bytes,1,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTVShowDeliveryDataRequest) Reset() {
	*x = GetTVShowDeliveryDataRequest{}
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTVShowDeliveryDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTVShowDeliveryDataRequest) ProtoMessage() {}

func (x *GetTVShowDeliveryDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTVShowDeliveryDataRequest.ProtoReflect.Descriptor instead.
func (*GetTVShowDeliveryDataRequest) Descriptor() ([]byte, []int) {
	return file_torrent_to_media_server_videocontent_proto_rawDescGZIP(), []int{17}
}

func (x *GetTVShowDeliveryDataRequest) GetContentId() *ContentID {
	if x != nil {
		return x.ContentId
	}
	return nil
}

type GetTVShowDeliveryDataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *TVShowDeliveryState   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTVShowDeliveryDataResponse) Reset() {
	*x = GetTVShowDeliveryDataResponse{}
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTVShowDeliveryDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTVShowDeliveryDataResponse) ProtoMessage() {}

func (x *GetTVShowDeliveryDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTVShowDeliveryDataResponse.ProtoReflect.Descriptor instead.
func (*GetTVShowDeliveryDataResponse) Descriptor() ([]byte, []int) {
	return file_torrent_to_media_server_videocontent_proto_rawDescGZIP(), []int{18}
}

func (x *GetTVShowDeliveryDataResponse) GetResult() *TVShowDeliveryState {
	if x != nil {
		return x.Result
	}
	return nil
}

type ChoseTorrentOptionsRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	ContentId *ContentID             `protobuf:"bytes,1,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	// Пользователь выбрал конкретный торрента файл
	Href *string `protobuf:"bytes,2,opt,name=href,proto3,oneof" json:"href,omitempty"`
	// Пользователь поменял поисковый запрос
	NewSearchQuery *string `protobuf:"bytes,3,opt,name=new_search_query,json=newSearchQuery,proto3,oneof" json:"new_search_query,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ChoseTorrentOptionsRequest) Reset() {
	*x = ChoseTorrentOptionsRequest{}
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChoseTorrentOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChoseTorrentOptionsRequest) ProtoMessage() {}

func (x *ChoseTorrentOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChoseTorrentOptionsRequest.ProtoReflect.Descriptor instead.
func (*ChoseTorrentOptionsRequest) Descriptor() ([]byte, []int) {
	return file_torrent_to_media_server_videocontent_proto_rawDescGZIP(), []int{19}
}

func (x *ChoseTorrentOptionsRequest) GetContentId() *ContentID {
	if x != nil {
		return x.ContentId
	}
	return nil
}

func (x *ChoseTorrentOptionsRequest) GetHref() string {
	if x != nil && x.Href != nil {
		return *x.Href
	}
	return ""
}

func (x *ChoseTorrentOptionsRequest) GetNewSearchQuery() string {
	if x != nil && x.NewSearchQuery != nil {
		return *x.NewSearchQuery
	}
	return ""
}

type ChoseTorrentOptionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *TVShowDeliveryState   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChoseTorrentOptionsResponse) Reset() {
	*x = ChoseTorrentOptionsResponse{}
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChoseTorrentOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChoseTorrentOptionsResponse) ProtoMessage() {}

func (x *ChoseTorrentOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChoseTorrentOptionsResponse.ProtoReflect.Descriptor instead.
func (*ChoseTorrentOptionsResponse) Descriptor() ([]byte, []int) {
	return file_torrent_to_media_server_videocontent_proto_rawDescGZIP(), []int{20}
}

func (x *ChoseTorrentOptionsResponse) GetResult() *TVShowDeliveryState {
	if x != nil {
		return x.Result
	}
	return nil
}

type ChoseFileMatchesOptionsRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	ContentId *ContentID             `protobuf:"bytes,1,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	// Пользователь подтверждает сметченные файлы
	Approve       bool `protobuf:"varint,2,opt,name=approve,proto3" json:"approve,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChoseFileMatchesOptionsRequest) Reset() {
	*x = ChoseFileMatchesOptionsRequest{}
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChoseFileMatchesOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChoseFileMatchesOptionsRequest) ProtoMessage() {}

func (x *ChoseFileMatchesOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChoseFileMatchesOptionsRequest.ProtoReflect.Descriptor instead.
func (*ChoseFileMatchesOptionsRequest) Descriptor() ([]byte, []int) {
	return file_torrent_to_media_server_videocontent_proto_rawDescGZIP(), []int{21}
}

func (x *ChoseFileMatchesOptionsRequest) GetContentId() *ContentID {
	if x != nil {
		return x.ContentId
	}
	return nil
}

func (x *ChoseFileMatchesOptionsRequest) GetApprove() bool {
	if x != nil {
		return x.Approve
	}
	return false
}

type ChoseFileMatchesOptionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *TVShowDeliveryState   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChoseFileMatchesOptionsResponse) Reset() {
	*x = ChoseFileMatchesOptionsResponse{}
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChoseFileMatchesOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChoseFileMatchesOptionsResponse) ProtoMessage() {}

func (x *ChoseFileMatchesOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_to_media_server_videocontent_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChoseFileMatchesOptionsResponse.ProtoReflect.Descriptor instead.
func (*ChoseFileMatchesOptionsResponse) Descriptor() ([]byte, []int) {
	return file_torrent_to_media_server_videocontent_proto_rawDescGZIP(), []int{22}
}

func (x *ChoseFileMatchesOptionsResponse) GetResult() *TVShowDeliveryState {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_torrent_to_media_server_videocontent_proto protoreflect.FileDescriptor

const file_torrent_to_media_server_videocontent_proto_rawDesc = "" +
	"\n" +
	"*torrent-to-media-server/videocontent.proto\x12\x14torrenttomediaserver\x1a\x1cgoogle/api/annotations.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bgoogle/protobuf/empty.proto\"?\n" +
	"\bTVShowID\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x04R\x02id\x12#\n" +
	"\rseason_number\x18\x02 \x01(\rR\fseasonNumber\"\x82\x01\n" +
	"\tContentID\x12\x1e\n" +
	"\bmovie_id\x18\x01 \x01(\x04H\x00R\amovieId\x88\x01\x01\x12<\n" +
	"\atv_show\x18\x02 \x01(\v2\x1e.torrenttomediaserver.TVShowIDH\x01R\x06tvShow\x88\x01\x01B\v\n" +
	"\t_movie_idB\n" +
	"\n" +
	"\b_tv_show\"\xe8\x01\n" +
	"\fVideoContent\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x129\n" +
	"\n" +
	"created_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12>\n" +
	"\n" +
	"content_id\x18\x03 \x01(\v2\x1f.torrenttomediaserver.ContentIDR\tcontentId\x12M\n" +
	"\x0fdelivery_status\x18\x04 \x01(\x0e2$.torrenttomediaserver.DeliveryStatusR\x0edeliveryStatus\"\xba\x01\n" +
	"\rTorrentSearch\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12\x12\n" +
	"\x04href\x18\x02 \x01(\tR\x04href\x12\x12\n" +
	"\x04size\x18\x03 \x01(\tR\x04size\x12\x14\n" +
	"\x05seeds\x18\x04 \x01(\tR\x05seeds\x12\x18\n" +
	"\aleeches\x18\x05 \x01(\tR\aleeches\x12\x1c\n" +
	"\tdownloads\x18\x06 \x01(\tR\tdownloads\x12\x1d\n" +
	"\n" +
	"added_date\x18\a \x01(\tR\taddedDate\"~\n" +
	"\bFileInfo\x12#\n" +
	"\rrelative_path\x18\x01 \x01(\tR\frelativePath\x12\x1b\n" +
	"\tfull_path\x18\x02 \x01(\tR\bfullPath\x12\x12\n" +
	"\x04size\x18\x03 \x01(\x03R\x04size\x12\x1c\n" +
	"\textension\x18\x04 \x01(\tR\textension\"|\n" +
	"\vEpisodeInfo\x12#\n" +
	"\rseason_number\x18\x01 \x01(\rR\fseasonNumber\x12!\n" +
	"\fepisode_name\x18\x02 \x01(\tR\vepisodeName\x12%\n" +
	"\x0eepisode_number\x18\x03 \x01(\rR\repisodeNumber\"?\n" +
	"\tVideoFile\x122\n" +
	"\x04file\x18\x01 \x01(\v2\x1e.torrenttomediaserver.FileInfoR\x04file\"k\n" +
	"\x05Track\x122\n" +
	"\x04file\x18\x01 \x01(\v2\x1e.torrenttomediaserver.FileInfoR\x04file\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1a\n" +
	"\blanguage\x18\x03 \x01(\tR\blanguage\"\xfd\x01\n" +
	"\x0eContentMatches\x12;\n" +
	"\aepisode\x18\x01 \x01(\v2!.torrenttomediaserver.EpisodeInfoR\aepisode\x125\n" +
	"\x05video\x18\x02 \x01(\v2\x1f.torrenttomediaserver.VideoFileR\x05video\x12<\n" +
	"\vaudio_files\x18\x03 \x03(\v2\x1b.torrenttomediaserver.TrackR\n" +
	"audioFiles\x129\n" +
	"\tsubtitles\x18\x04 \x03(\v2\x1b.torrenttomediaserver.TrackR\tsubtitles\"\xda\x02\n" +
	"\x15TorrentDownloadStatus\x12N\n" +
	"\x05state\x18\x01 \x01(\x0e28.torrenttomediaserver.TorrentDownloadStatus.TorrentStateR\x05state\x12\x1a\n" +
	"\bprogress\x18\x02 \x01(\x02R\bprogress\x12\x1f\n" +
	"\vis_complete\x18\x03 \x01(\bR\n" +
	"isComplete\"\xb3\x01\n" +
	"\fTorrentState\x12\x19\n" +
	"\x15TORRENT_STATE_UNKNOWN\x10\x00\x12\x17\n" +
	"\x13TORRENT_STATE_ERROR\x10\x01\x12\x1b\n" +
	"\x17TORRENT_STATE_UPLOADING\x10\x02\x12\x1d\n" +
	"\x19TORRENT_STATE_DOWNLOADING\x10\x03\x12\x19\n" +
	"\x15TORRENT_STATE_STOPPED\x10\x04\x12\x18\n" +
	"\x14TORRENT_STATE_QUEUED\x10\x05\"O\n" +
	"\x10MergeVideoStatus\x12\x1a\n" +
	"\bprogress\x18\x01 \x01(\x02R\bprogress\x12\x1f\n" +
	"\vis_complete\x18\x02 \x01(\bR\n" +
	"isComplete\"\xe0\x03\n" +
	"\x12TVShowDeliveryData\x12&\n" +
	"\fsearch_query\x18\x01 \x01(\tH\x00R\vsearchQuery\x88\x01\x01\x12J\n" +
	"\x0etorrent_search\x18\x02 \x03(\v2#.torrenttomediaserver.TorrentSearchR\rtorrentSearch\x12M\n" +
	"\x0fcontent_matches\x18\x03 \x03(\v2$.torrenttomediaserver.ContentMatchesR\x0econtentMatches\x12h\n" +
	"\x17torrent_download_status\x18\x04 \x01(\v2+.torrenttomediaserver.TorrentDownloadStatusH\x01R\x15torrentDownloadStatus\x88\x01\x01\x12Y\n" +
	"\x12merge_video_status\x18\x05 \x01(\v2&.torrenttomediaserver.MergeVideoStatusH\x02R\x10mergeVideoStatus\x88\x01\x01B\x0f\n" +
	"\r_search_queryB\x1a\n" +
	"\x18_torrent_download_statusB\x15\n" +
	"\x13_merge_video_status\"\x93\x01\n" +
	"\x13TVShowDeliveryState\x12<\n" +
	"\x04data\x18\x01 \x01(\v2(.torrenttomediaserver.TVShowDeliveryDataR\x04data\x12>\n" +
	"\x04step\x18\x02 \x01(\x0e2*.torrenttomediaserver.TVShowDeliveryStatusR\x04step\"[\n" +
	"\x19CreateVideoContentRequest\x12>\n" +
	"\n" +
	"content_id\x18\x01 \x01(\v2\x1f.torrenttomediaserver.ContentIDR\tcontentId\"X\n" +
	"\x1aCreateVideoContentResponse\x12:\n" +
	"\x06result\x18\x01 \x01(\v2\".torrenttomediaserver.VideoContentR\x06result\"X\n" +
	"\x16GetVideoContentRequest\x12>\n" +
	"\n" +
	"content_id\x18\x01 \x01(\v2\x1f.torrenttomediaserver.ContentIDR\tcontentId\"S\n" +
	"\x17GetVideoContentResponse\x128\n" +
	"\x05items\x18\x01 \x03(\v2\".torrenttomediaserver.VideoContentR\x05items\"^\n" +
	"\x1cGetTVShowDeliveryDataRequest\x12>\n" +
	"\n" +
	"content_id\x18\x01 \x01(\v2\x1f.torrenttomediaserver.ContentIDR\tcontentId\"b\n" +
	"\x1dGetTVShowDeliveryDataResponse\x12A\n" +
	"\x06result\x18\x01 \x01(\v2).torrenttomediaserver.TVShowDeliveryStateR\x06result\"\xc2\x01\n" +
	"\x1aChoseTorrentOptionsRequest\x12>\n" +
	"\n" +
	"content_id\x18\x01 \x01(\v2\x1f.torrenttomediaserver.ContentIDR\tcontentId\x12\x17\n" +
	"\x04href\x18\x02 \x01(\tH\x00R\x04href\x88\x01\x01\x12-\n" +
	"\x10new_search_query\x18\x03 \x01(\tH\x01R\x0enewSearchQuery\x88\x01\x01B\a\n" +
	"\x05_hrefB\x13\n" +
	"\x11_new_search_query\"`\n" +
	"\x1bChoseTorrentOptionsResponse\x12A\n" +
	"\x06result\x18\x01 \x01(\v2).torrenttomediaserver.TVShowDeliveryStateR\x06result\"z\n" +
	"\x1eChoseFileMatchesOptionsRequest\x12>\n" +
	"\n" +
	"content_id\x18\x01 \x01(\v2\x1f.torrenttomediaserver.ContentIDR\tcontentId\x12\x18\n" +
	"\aapprove\x18\x02 \x01(\bR\aapprove\"d\n" +
	"\x1fChoseFileMatchesOptionsResponse\x12A\n" +
	"\x06result\x18\x01 \x01(\v2).torrenttomediaserver.TVShowDeliveryStateR\x06result*\x80\x01\n" +
	"\x0eDeliveryStatus\x12\x19\n" +
	"\x15DeliveryStatusUnknown\x10\x00\x12\x18\n" +
	"\x14DeliveryStatusFailed\x10\x01\x12\x1c\n" +
	"\x18DeliveryStatusInProgress\x10\x02\x12\x1b\n" +
	"\x17DeliveryStatusDelivered\x10\x03*\xf7\x03\n" +
	"\x14TVShowDeliveryStatus\x12\x1f\n" +
	"\x1bTVShowDeliveryStatusUnknown\x10\x00\x12\x17\n" +
	"\x13GenerateSearchQuery\x10\x01\x12\x12\n" +
	"\x0eSearchTorrents\x10\x02\x12\x1b\n" +
	"\x17WaitingUserChoseTorrent\x10\x03\x12\x11\n" +
	"\rGetMagnetLink\x10\x04\x12\x1d\n" +
	"\x19AddTorrentToTorrentClient\x10\x05\x12\x16\n" +
	"\x12PrepareFileMatches\x10\x06\x12\x1b\n" +
	"\x17WaitingChoseFileMatches\x10\a\x12\"\n" +
	"\x1eWaitingTorrentDownloadComplete\x10\b\x12\x1e\n" +
	"\x1aCreateVideoContentCatalogs\x10\t\x12\x1f\n" +
	"\x1bDeterminingNeedConvertFiles\x10\n" +
	"\x12\x18\n" +
	"\x14StartMergeVideoFiles\x10\v\x12\x1a\n" +
	"\x16WaitingMergeVideoFiles\x10\f\x12\x12\n" +
	"\x0eCopyVideoFiles\x10\r\x12\x15\n" +
	"\x11SetVideoFileGroup\x10\x0e\x12\x13\n" +
	"\x0fGetCatalogsSize\x10\x0f\x12\x14\n" +
	"\x10SetMediaMetaData\x10\x10\x12\x1c\n" +
	"\x18SendDeliveryNotification\x10\x112\xe5\b\n" +
	"\x13VideoContentService\x12\xc4\x01\n" +
	"\x12CreateVideoContent\x12/.torrenttomediaserver.CreateVideoContentRequest\x1a0.torrenttomediaserver.CreateVideoContentResponse\"K\x92A2\x120Создание файловой раздачи\x82\xd3\xe4\x93\x02\x10:\x01*\"\v/v1/content\x12\xcf\x01\n" +
	"\x0fGetVideoContent\x12,.torrenttomediaserver.GetVideoContentRequest\x1a-.torrenttomediaserver.GetVideoContentResponse\"_\x92AI\x12GПолучение доставок для кино/тв сериала\x82\xd3\xe4\x93\x02\r\x12\v/v1/content\x12\xe4\x01\n" +
	"\x15GetTVShowDeliveryData\x122.torrenttomediaserver.GetTVShowDeliveryDataRequest\x1a3.torrenttomediaserver.GetTVShowDeliveryDataResponse\"b\x92A?\x12=Получение данных стейта доставки\x82\xd3\xe4\x93\x02\x1a\x12\x18/v1/tvshow/delivery/data\x12\xda\x01\n" +
	"\x13ChoseTorrentOptions\x120.torrenttomediaserver.ChoseTorrentOptionsRequest\x1a1.torrenttomediaserver.ChoseTorrentOptionsResponse\"^\x92A/\x12-Выбор раздачи с торрента\x82\xd3\xe4\x93\x02&:\x01*2!/v1/tvshow/delivery/chose-torrent\x12\xf0\x01\n" +
	"\x17ChoseFileMatchesOptions\x124.torrenttomediaserver.ChoseFileMatchesOptionsRequest\x1a5.torrenttomediaserver.ChoseFileMatchesOptionsResponse\"h\x92A4\x122Подтверждение метча файлов\x82\xd3\xe4\x93\x02+:\x01*2&/v1/tvshow/delivery/chose-file-matchesB0Z.github.com/kkiling/torrent-to-media-server/apib\x06proto3"

var (
	file_torrent_to_media_server_videocontent_proto_rawDescOnce sync.Once
	file_torrent_to_media_server_videocontent_proto_rawDescData []byte
)

func file_torrent_to_media_server_videocontent_proto_rawDescGZIP() []byte {
	file_torrent_to_media_server_videocontent_proto_rawDescOnce.Do(func() {
		file_torrent_to_media_server_videocontent_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_torrent_to_media_server_videocontent_proto_rawDesc), len(file_torrent_to_media_server_videocontent_proto_rawDesc)))
	})
	return file_torrent_to_media_server_videocontent_proto_rawDescData
}

var file_torrent_to_media_server_videocontent_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_torrent_to_media_server_videocontent_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_torrent_to_media_server_videocontent_proto_goTypes = []any{
	(DeliveryStatus)(0),                     // 0: torrenttomediaserver.DeliveryStatus
	(TVShowDeliveryStatus)(0),               // 1: torrenttomediaserver.TVShowDeliveryStatus
	(TorrentDownloadStatus_TorrentState)(0), // 2: torrenttomediaserver.TorrentDownloadStatus.TorrentState
	(*TVShowID)(nil),                        // 3: torrenttomediaserver.TVShowID
	(*ContentID)(nil),                       // 4: torrenttomediaserver.ContentID
	(*VideoContent)(nil),                    // 5: torrenttomediaserver.VideoContent
	(*TorrentSearch)(nil),                   // 6: torrenttomediaserver.TorrentSearch
	(*FileInfo)(nil),                        // 7: torrenttomediaserver.FileInfo
	(*EpisodeInfo)(nil),                     // 8: torrenttomediaserver.EpisodeInfo
	(*VideoFile)(nil),                       // 9: torrenttomediaserver.VideoFile
	(*Track)(nil),                           // 10: torrenttomediaserver.Track
	(*ContentMatches)(nil),                  // 11: torrenttomediaserver.ContentMatches
	(*TorrentDownloadStatus)(nil),           // 12: torrenttomediaserver.TorrentDownloadStatus
	(*MergeVideoStatus)(nil),                // 13: torrenttomediaserver.MergeVideoStatus
	(*TVShowDeliveryData)(nil),              // 14: torrenttomediaserver.TVShowDeliveryData
	(*TVShowDeliveryState)(nil),             // 15: torrenttomediaserver.TVShowDeliveryState
	(*CreateVideoContentRequest)(nil),       // 16: torrenttomediaserver.CreateVideoContentRequest
	(*CreateVideoContentResponse)(nil),      // 17: torrenttomediaserver.CreateVideoContentResponse
	(*GetVideoContentRequest)(nil),          // 18: torrenttomediaserver.GetVideoContentRequest
	(*GetVideoContentResponse)(nil),         // 19: torrenttomediaserver.GetVideoContentResponse
	(*GetTVShowDeliveryDataRequest)(nil),    // 20: torrenttomediaserver.GetTVShowDeliveryDataRequest
	(*GetTVShowDeliveryDataResponse)(nil),   // 21: torrenttomediaserver.GetTVShowDeliveryDataResponse
	(*ChoseTorrentOptionsRequest)(nil),      // 22: torrenttomediaserver.ChoseTorrentOptionsRequest
	(*ChoseTorrentOptionsResponse)(nil),     // 23: torrenttomediaserver.ChoseTorrentOptionsResponse
	(*ChoseFileMatchesOptionsRequest)(nil),  // 24: torrenttomediaserver.ChoseFileMatchesOptionsRequest
	(*ChoseFileMatchesOptionsResponse)(nil), // 25: torrenttomediaserver.ChoseFileMatchesOptionsResponse
	(*timestamppb.Timestamp)(nil),           // 26: google.protobuf.Timestamp
}
var file_torrent_to_media_server_videocontent_proto_depIdxs = []int32{
	3,  // 0: torrenttomediaserver.ContentID.tv_show:type_name -> torrenttomediaserver.TVShowID
	26, // 1: torrenttomediaserver.VideoContent.created_at:type_name -> google.protobuf.Timestamp
	4,  // 2: torrenttomediaserver.VideoContent.content_id:type_name -> torrenttomediaserver.ContentID
	0,  // 3: torrenttomediaserver.VideoContent.delivery_status:type_name -> torrenttomediaserver.DeliveryStatus
	7,  // 4: torrenttomediaserver.VideoFile.file:type_name -> torrenttomediaserver.FileInfo
	7,  // 5: torrenttomediaserver.Track.file:type_name -> torrenttomediaserver.FileInfo
	8,  // 6: torrenttomediaserver.ContentMatches.episode:type_name -> torrenttomediaserver.EpisodeInfo
	9,  // 7: torrenttomediaserver.ContentMatches.video:type_name -> torrenttomediaserver.VideoFile
	10, // 8: torrenttomediaserver.ContentMatches.audio_files:type_name -> torrenttomediaserver.Track
	10, // 9: torrenttomediaserver.ContentMatches.subtitles:type_name -> torrenttomediaserver.Track
	2,  // 10: torrenttomediaserver.TorrentDownloadStatus.state:type_name -> torrenttomediaserver.TorrentDownloadStatus.TorrentState
	6,  // 11: torrenttomediaserver.TVShowDeliveryData.torrent_search:type_name -> torrenttomediaserver.TorrentSearch
	11, // 12: torrenttomediaserver.TVShowDeliveryData.content_matches:type_name -> torrenttomediaserver.ContentMatches
	12, // 13: torrenttomediaserver.TVShowDeliveryData.torrent_download_status:type_name -> torrenttomediaserver.TorrentDownloadStatus
	13, // 14: torrenttomediaserver.TVShowDeliveryData.merge_video_status:type_name -> torrenttomediaserver.MergeVideoStatus
	14, // 15: torrenttomediaserver.TVShowDeliveryState.data:type_name -> torrenttomediaserver.TVShowDeliveryData
	1,  // 16: torrenttomediaserver.TVShowDeliveryState.step:type_name -> torrenttomediaserver.TVShowDeliveryStatus
	4,  // 17: torrenttomediaserver.CreateVideoContentRequest.content_id:type_name -> torrenttomediaserver.ContentID
	5,  // 18: torrenttomediaserver.CreateVideoContentResponse.result:type_name -> torrenttomediaserver.VideoContent
	4,  // 19: torrenttomediaserver.GetVideoContentRequest.content_id:type_name -> torrenttomediaserver.ContentID
	5,  // 20: torrenttomediaserver.GetVideoContentResponse.items:type_name -> torrenttomediaserver.VideoContent
	4,  // 21: torrenttomediaserver.GetTVShowDeliveryDataRequest.content_id:type_name -> torrenttomediaserver.ContentID
	15, // 22: torrenttomediaserver.GetTVShowDeliveryDataResponse.result:type_name -> torrenttomediaserver.TVShowDeliveryState
	4,  // 23: torrenttomediaserver.ChoseTorrentOptionsRequest.content_id:type_name -> torrenttomediaserver.ContentID
	15, // 24: torrenttomediaserver.ChoseTorrentOptionsResponse.result:type_name -> torrenttomediaserver.TVShowDeliveryState
	4,  // 25: torrenttomediaserver.ChoseFileMatchesOptionsRequest.content_id:type_name -> torrenttomediaserver.ContentID
	15, // 26: torrenttomediaserver.ChoseFileMatchesOptionsResponse.result:type_name -> torrenttomediaserver.TVShowDeliveryState
	16, // 27: torrenttomediaserver.VideoContentService.CreateVideoContent:input_type -> torrenttomediaserver.CreateVideoContentRequest
	18, // 28: torrenttomediaserver.VideoContentService.GetVideoContent:input_type -> torrenttomediaserver.GetVideoContentRequest
	20, // 29: torrenttomediaserver.VideoContentService.GetTVShowDeliveryData:input_type -> torrenttomediaserver.GetTVShowDeliveryDataRequest
	22, // 30: torrenttomediaserver.VideoContentService.ChoseTorrentOptions:input_type -> torrenttomediaserver.ChoseTorrentOptionsRequest
	24, // 31: torrenttomediaserver.VideoContentService.ChoseFileMatchesOptions:input_type -> torrenttomediaserver.ChoseFileMatchesOptionsRequest
	17, // 32: torrenttomediaserver.VideoContentService.CreateVideoContent:output_type -> torrenttomediaserver.CreateVideoContentResponse
	19, // 33: torrenttomediaserver.VideoContentService.GetVideoContent:output_type -> torrenttomediaserver.GetVideoContentResponse
	21, // 34: torrenttomediaserver.VideoContentService.GetTVShowDeliveryData:output_type -> torrenttomediaserver.GetTVShowDeliveryDataResponse
	23, // 35: torrenttomediaserver.VideoContentService.ChoseTorrentOptions:output_type -> torrenttomediaserver.ChoseTorrentOptionsResponse
	25, // 36: torrenttomediaserver.VideoContentService.ChoseFileMatchesOptions:output_type -> torrenttomediaserver.ChoseFileMatchesOptionsResponse
	32, // [32:37] is the sub-list for method output_type
	27, // [27:32] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_torrent_to_media_server_videocontent_proto_init() }
func file_torrent_to_media_server_videocontent_proto_init() {
	if File_torrent_to_media_server_videocontent_proto != nil {
		return
	}
	file_torrent_to_media_server_videocontent_proto_msgTypes[1].OneofWrappers = []any{}
	file_torrent_to_media_server_videocontent_proto_msgTypes[11].OneofWrappers = []any{}
	file_torrent_to_media_server_videocontent_proto_msgTypes[19].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_torrent_to_media_server_videocontent_proto_rawDesc), len(file_torrent_to_media_server_videocontent_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_torrent_to_media_server_videocontent_proto_goTypes,
		DependencyIndexes: file_torrent_to_media_server_videocontent_proto_depIdxs,
		EnumInfos:         file_torrent_to_media_server_videocontent_proto_enumTypes,
		MessageInfos:      file_torrent_to_media_server_videocontent_proto_msgTypes,
	}.Build()
	File_torrent_to_media_server_videocontent_proto = out.File
	file_torrent_to_media_server_videocontent_proto_goTypes = nil
	file_torrent_to_media_server_videocontent_proto_depIdxs = nil
}
