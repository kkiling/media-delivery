// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: torrent-to-media-server/videocontent.proto

package api

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VideoContentService_CreateVideoContent_FullMethodName      = "/torrenttomediaserver.VideoContentService/CreateVideoContent"
	VideoContentService_GetVideoContent_FullMethodName         = "/torrenttomediaserver.VideoContentService/GetVideoContent"
	VideoContentService_GetTVShowDeliveryData_FullMethodName   = "/torrenttomediaserver.VideoContentService/GetTVShowDeliveryData"
	VideoContentService_ChoseTorrentOptions_FullMethodName     = "/torrenttomediaserver.VideoContentService/ChoseTorrentOptions"
	VideoContentService_ChoseFileMatchesOptions_FullMethodName = "/torrenttomediaserver.VideoContentService/ChoseFileMatchesOptions"
)

// VideoContentServiceClient is the client API for VideoContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoContentServiceClient interface {
	CreateVideoContent(ctx context.Context, in *CreateVideoContentRequest, opts ...grpc.CallOption) (*CreateVideoContentResponse, error)
	GetVideoContent(ctx context.Context, in *GetVideoContentRequest, opts ...grpc.CallOption) (*GetVideoContentResponse, error)
	GetTVShowDeliveryData(ctx context.Context, in *GetTVShowDeliveryDataRequest, opts ...grpc.CallOption) (*GetTVShowDeliveryDataResponse, error)
	ChoseTorrentOptions(ctx context.Context, in *ChoseTorrentOptionsRequest, opts ...grpc.CallOption) (*ChoseTorrentOptionsResponse, error)
	ChoseFileMatchesOptions(ctx context.Context, in *ChoseFileMatchesOptionsRequest, opts ...grpc.CallOption) (*ChoseFileMatchesOptionsResponse, error)
}

type videoContentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoContentServiceClient(cc grpc.ClientConnInterface) VideoContentServiceClient {
	return &videoContentServiceClient{cc}
}

func (c *videoContentServiceClient) CreateVideoContent(ctx context.Context, in *CreateVideoContentRequest, opts ...grpc.CallOption) (*CreateVideoContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVideoContentResponse)
	err := c.cc.Invoke(ctx, VideoContentService_CreateVideoContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoContentServiceClient) GetVideoContent(ctx context.Context, in *GetVideoContentRequest, opts ...grpc.CallOption) (*GetVideoContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVideoContentResponse)
	err := c.cc.Invoke(ctx, VideoContentService_GetVideoContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoContentServiceClient) GetTVShowDeliveryData(ctx context.Context, in *GetTVShowDeliveryDataRequest, opts ...grpc.CallOption) (*GetTVShowDeliveryDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTVShowDeliveryDataResponse)
	err := c.cc.Invoke(ctx, VideoContentService_GetTVShowDeliveryData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoContentServiceClient) ChoseTorrentOptions(ctx context.Context, in *ChoseTorrentOptionsRequest, opts ...grpc.CallOption) (*ChoseTorrentOptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChoseTorrentOptionsResponse)
	err := c.cc.Invoke(ctx, VideoContentService_ChoseTorrentOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoContentServiceClient) ChoseFileMatchesOptions(ctx context.Context, in *ChoseFileMatchesOptionsRequest, opts ...grpc.CallOption) (*ChoseFileMatchesOptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChoseFileMatchesOptionsResponse)
	err := c.cc.Invoke(ctx, VideoContentService_ChoseFileMatchesOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoContentServiceServer is the server API for VideoContentService service.
// All implementations must embed UnimplementedVideoContentServiceServer
// for forward compatibility.
type VideoContentServiceServer interface {
	CreateVideoContent(context.Context, *CreateVideoContentRequest) (*CreateVideoContentResponse, error)
	GetVideoContent(context.Context, *GetVideoContentRequest) (*GetVideoContentResponse, error)
	GetTVShowDeliveryData(context.Context, *GetTVShowDeliveryDataRequest) (*GetTVShowDeliveryDataResponse, error)
	ChoseTorrentOptions(context.Context, *ChoseTorrentOptionsRequest) (*ChoseTorrentOptionsResponse, error)
	ChoseFileMatchesOptions(context.Context, *ChoseFileMatchesOptionsRequest) (*ChoseFileMatchesOptionsResponse, error)
	mustEmbedUnimplementedVideoContentServiceServer()
}

// UnimplementedVideoContentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVideoContentServiceServer struct{}

func (UnimplementedVideoContentServiceServer) CreateVideoContent(context.Context, *CreateVideoContentRequest) (*CreateVideoContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVideoContent not implemented")
}
func (UnimplementedVideoContentServiceServer) GetVideoContent(context.Context, *GetVideoContentRequest) (*GetVideoContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoContent not implemented")
}
func (UnimplementedVideoContentServiceServer) GetTVShowDeliveryData(context.Context, *GetTVShowDeliveryDataRequest) (*GetTVShowDeliveryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTVShowDeliveryData not implemented")
}
func (UnimplementedVideoContentServiceServer) ChoseTorrentOptions(context.Context, *ChoseTorrentOptionsRequest) (*ChoseTorrentOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChoseTorrentOptions not implemented")
}
func (UnimplementedVideoContentServiceServer) ChoseFileMatchesOptions(context.Context, *ChoseFileMatchesOptionsRequest) (*ChoseFileMatchesOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChoseFileMatchesOptions not implemented")
}
func (UnimplementedVideoContentServiceServer) mustEmbedUnimplementedVideoContentServiceServer() {}
func (UnimplementedVideoContentServiceServer) testEmbeddedByValue()                             {}

// UnsafeVideoContentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoContentServiceServer will
// result in compilation errors.
type UnsafeVideoContentServiceServer interface {
	mustEmbedUnimplementedVideoContentServiceServer()
}

func RegisterVideoContentServiceServer(s grpc.ServiceRegistrar, srv VideoContentServiceServer) {
	// If the following call pancis, it indicates UnimplementedVideoContentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VideoContentService_ServiceDesc, srv)
}

func _VideoContentService_CreateVideoContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVideoContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoContentServiceServer).CreateVideoContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoContentService_CreateVideoContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoContentServiceServer).CreateVideoContent(ctx, req.(*CreateVideoContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoContentService_GetVideoContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoContentServiceServer).GetVideoContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoContentService_GetVideoContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoContentServiceServer).GetVideoContent(ctx, req.(*GetVideoContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoContentService_GetTVShowDeliveryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTVShowDeliveryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoContentServiceServer).GetTVShowDeliveryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoContentService_GetTVShowDeliveryData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoContentServiceServer).GetTVShowDeliveryData(ctx, req.(*GetTVShowDeliveryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoContentService_ChoseTorrentOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChoseTorrentOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoContentServiceServer).ChoseTorrentOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoContentService_ChoseTorrentOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoContentServiceServer).ChoseTorrentOptions(ctx, req.(*ChoseTorrentOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoContentService_ChoseFileMatchesOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChoseFileMatchesOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoContentServiceServer).ChoseFileMatchesOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoContentService_ChoseFileMatchesOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoContentServiceServer).ChoseFileMatchesOptions(ctx, req.(*ChoseFileMatchesOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoContentService_ServiceDesc is the grpc.ServiceDesc for VideoContentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoContentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "torrenttomediaserver.VideoContentService",
	HandlerType: (*VideoContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVideoContent",
			Handler:    _VideoContentService_CreateVideoContent_Handler,
		},
		{
			MethodName: "GetVideoContent",
			Handler:    _VideoContentService_GetVideoContent_Handler,
		},
		{
			MethodName: "GetTVShowDeliveryData",
			Handler:    _VideoContentService_GetTVShowDeliveryData_Handler,
		},
		{
			MethodName: "ChoseTorrentOptions",
			Handler:    _VideoContentService_ChoseTorrentOptions_Handler,
		},
		{
			MethodName: "ChoseFileMatchesOptions",
			Handler:    _VideoContentService_ChoseFileMatchesOptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "torrent-to-media-server/videocontent.proto",
}
